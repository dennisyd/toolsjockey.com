import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

// Enhanced PDF converter for Excel data with multiple layout options and orientation support
export interface PDFOptions {
  layout: 'table' | 'report' | 'summary' | 'detailed';
  branding: boolean;
  charts: boolean;
  orientation: 'portrait' | 'landscape';
  fontSize: number;
  maxRows: number;
  includeHeaders: boolean;
}

// worksheetData: array of arrays (rows)
export async function pdfConverter(worksheetData: string[][], options: PDFOptions): Promise<Blob> {
  try {
    // Create PDF with specified orientation
    const doc = new jsPDF({
      orientation: options.orientation,
      unit: 'mm',
      format: 'a4'
    });

    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 15;
    
    let startY = margin;
    
    // Add branding if requested
    if (options.branding) {
      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100);
      doc.text('Generated by ToolsJockey.com', margin, startY);
      startY += 8;
    }

    // Handle different layouts
    if (options.layout === 'summary') {
      // Summary layout - show only first few rows with statistics
      const summaryData = worksheetData.slice(0, Math.min(10, worksheetData.length));
      const totalRows = worksheetData.length;
      const totalCols = worksheetData[0]?.length || 0;
      
      // Add summary info
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text('Data Summary', margin, startY);
      startY += 8;
      
      doc.setFontSize(10);
      doc.text(`Total Rows: ${totalRows}`, margin, startY);
      startY += 5;
      doc.text(`Total Columns: ${totalCols}`, margin, startY);
      startY += 8;
      
      // Add sample data table
      if (summaryData.length > 0) {
        autoTable(doc, {
          head: options.includeHeaders && summaryData.length > 0 ? [summaryData[0]] : [],
          body: options.includeHeaders ? summaryData.slice(1) : summaryData,
          startY: startY,
          theme: 'striped',
          styles: { fontSize: options.fontSize },
          headStyles: { fillColor: [66, 139, 202] },
          margin: { top: 5 }
        });
      }
      
    } else if (options.layout === 'detailed') {
      // Detailed layout - show all data with better formatting
      const maxRows = Math.min(options.maxRows, worksheetData.length);
      const dataToShow = worksheetData.slice(0, maxRows);
      
      if (dataToShow.length > 0) {
        autoTable(doc, {
          head: options.includeHeaders ? [dataToShow[0]] : [],
          body: options.includeHeaders ? dataToShow.slice(1) : dataToShow,
          startY: startY,
          theme: 'grid',
          styles: { fontSize: options.fontSize },
          headStyles: { 
            fillColor: [51, 51, 51],
            textColor: [255, 255, 255],
            fontStyle: 'bold'
          },
          alternateRowStyles: { fillColor: [245, 245, 245] },
          margin: { top: 5 },
          didDrawPage: function(data) {
            // Add page numbers
            const pageCount = doc.getNumberOfPages();
            doc.setFontSize(8);
            doc.setTextColor(100, 100, 100);
            doc.text(`Page ${data.pageNumber} of ${pageCount}`, pageWidth - 30, pageHeight - 10);
          }
        });
      }
      
    } else if (options.layout === 'report') {
      // Report layout - formatted for reports
      const maxRows = Math.min(options.maxRows, worksheetData.length);
      const dataToShow = worksheetData.slice(0, maxRows);
      
      // Add report header
      doc.setFontSize(16);
      doc.setTextColor(0, 0, 0);
      doc.text('Data Report', margin, startY);
      startY += 10;
      
      if (dataToShow.length > 0) {
        autoTable(doc, {
          head: options.includeHeaders ? [dataToShow[0]] : [],
          body: options.includeHeaders ? dataToShow.slice(1) : dataToShow,
          startY: startY,
          theme: 'plain',
          styles: { fontSize: options.fontSize },
          headStyles: { 
            fillColor: [70, 130, 180],
            textColor: [255, 255, 255],
            fontStyle: 'bold'
          },
          margin: { top: 5 }
        });
      }
      
    } else {
      // Default table layout
      const maxRows = Math.min(options.maxRows, worksheetData.length);
      const dataToShow = worksheetData.slice(0, maxRows);
      
      if (dataToShow.length > 0) {
        autoTable(doc, {
          head: options.includeHeaders ? [dataToShow[0]] : [],
          body: options.includeHeaders ? dataToShow.slice(1) : dataToShow,
          startY: startY,
          theme: 'grid',
          styles: { fontSize: options.fontSize },
          headStyles: { fillColor: [100, 100, 100] },
          margin: { top: 5 }
        });
      }
    }

    const pdfBlob = doc.output('blob');
    return pdfBlob;
  } catch (err: any) {
    console.error('PDF generation error:', err);
    throw new Error('Failed to generate PDF.');
  }
} 