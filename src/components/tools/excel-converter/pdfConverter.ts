import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

export interface PDFOptions {
  branding: boolean;
  includeHeaders: boolean;
  layout: 'table' | 'report' | 'summary' | 'detailed';
  orientation: 'portrait' | 'landscape';
  fontSize: number;
  maxRows: number;
}

// Main orchestrator function
export async function pdfConverter(worksheetData: string[][], options: PDFOptions): Promise<Blob> {
  try {
    console.log('=== PDF CONVERTER START ===');
    console.log('Options received:', options);
    
    // Step 1: Create the PDF document
    const doc = createPDFDocument(options);
    console.log('✓ PDF document created');
    
    // Step 2: Add branding if requested
    let currentY = 15; // Starting margin
    if (options.branding) {
      console.log('→ Adding branding...');
      currentY = addBranding(doc, currentY);
      console.log('✓ Branding added, Y position:', currentY);
    } else {
      console.log('→ Skipping branding (disabled)');
    }
    
    // Step 3: Prepare table data
    const tableData = prepareTableData(worksheetData, options);
    console.log('✓ Table data prepared, rows:', tableData.body.length);
    
    // Step 4: Get table styles based on layout
    const tableStyles = getTableStyles(options.layout, options.fontSize);
    console.log('✓ Table styles prepared for layout:', options.layout);
    
    // Step 5: Draw the table
    drawTable(doc, tableData, tableStyles, currentY, options);
    console.log('✓ Table drawn');
    
    // Step 6: Add layout-specific features
    if (options.layout === 'summary') {
      console.log('→ Adding summary stats...');
      addSummaryStats(doc, tableData, options);
      console.log('✓ Summary stats added');
    }
    
    if (options.layout === 'detailed') {
      console.log('→ Adding page numbers...');
      addPageNumbers(doc);
      console.log('✓ Page numbers added');
    }
    
    console.log('=== PDF CONVERTER COMPLETE ===');
    return doc.output('blob');
  } catch (err: any) {
    console.error('PDF generation error:', err);
    throw new Error('Failed to generate PDF.');
  }
}

// Function 1: Create PDF document
function createPDFDocument(options: PDFOptions): jsPDF {
  console.log('Creating PDF with orientation:', options.orientation);
  return new jsPDF({
    orientation: options.orientation,
    unit: 'mm',
    format: 'a4'
  });
}

// Function 2: Add branding text
function addBranding(doc: jsPDF, startY: number): number {
  console.log('Adding branding text at Y position:', startY);
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text('Generated by ToolsJockey.com', 15, startY);
  return startY + 8; // Return new Y position
}

// Function 3: Prepare table data
function prepareTableData(worksheetData: string[][], options: PDFOptions) {
  console.log('Preparing table data, max rows:', options.maxRows);
  
  // Limit data to maxRows
  const limitedData = worksheetData.slice(0, options.maxRows);
  
  if (limitedData.length === 0) {
    throw new Error('No data to convert');
  }
  
  // Prepare head and body data
  const head = options.includeHeaders ? [limitedData[0]] : [];
  const body = options.includeHeaders ? limitedData.slice(1) : limitedData;
  
  console.log('Head rows:', head.length, 'Body rows:', body.length);
  
  return { head, body };
}

// Function 4: Get table styles based on layout
function getTableStyles(layout: string, fontSize: number) {
  console.log('Getting styles for layout:', layout);
  
  const baseHeadStyles = {
    textColor: [255, 255, 255],
    fontStyle: 'bold' as const,
    halign: 'center' as const
  };
  
  const baseBodyStyles = {
    fontSize: fontSize
  };
  
  let headStyles: any = { ...baseHeadStyles };
  let bodyStyles: any = { ...baseBodyStyles };
  
  switch (layout) {
    case 'report':
      headStyles.fillColor = [66, 139, 202]; // Blue
      bodyStyles.textColor = [50, 50, 50];
      console.log('Using blue headers for report');
      break;
    case 'summary':
      headStyles.fillColor = [70, 130, 180]; // Steel blue
      bodyStyles.textColor = [40, 40, 40];
      console.log('Using steel blue headers for summary');
      break;
    case 'detailed':
      headStyles.fillColor = [47, 84, 150]; // Dark blue
      bodyStyles.textColor = [30, 30, 30];
      console.log('Using dark blue headers for detailed');
      break;
    default: // 'table'
      headStyles.fillColor = [100, 100, 100]; // Gray
      console.log('Using gray headers for table');
      break;
  }
  
  return { headStyles, bodyStyles };
}

// Function 5: Draw the table
function drawTable(doc: jsPDF, tableData: any, tableStyles: any, startY: number, options: PDFOptions) {
  console.log('Drawing table at Y position:', startY);
  
  autoTable(doc, {
    head: tableData.head,
    body: tableData.body,
    startY: startY,
    theme: 'grid',
    useCss: false,
    styles: { fontSize: options.fontSize },
    headStyles: tableStyles.headStyles,
    bodyStyles: tableStyles.bodyStyles,
    tableLineColor: [100, 100, 100],
    tableLineWidth: options.layout === 'detailed' ? 0.3 : 0.5,
    margin: { top: 5 }
  });
}

// Function 6: Add summary statistics
function addSummaryStats(doc: jsPDF, tableData: any, options: PDFOptions) {
  console.log('Adding summary statistics');
  const pageHeight = doc.internal.pageSize.height;
  const y = pageHeight - 20;
  
  doc.setFontSize(8);
  doc.setTextColor(100, 100, 100);
  
  const stats = {
    totalRows: tableData.body.length + tableData.head.length,
    totalColumns: tableData.head[0]?.length || 0,
    processedRows: Math.min(tableData.body.length + tableData.head.length, options.maxRows)
  };
  
  const statsText = `Summary: ${stats.processedRows} rows processed | ${stats.totalColumns} columns`;
  doc.text(statsText, 15, y);
}

// Function 7: Add page numbers
function addPageNumbers(doc: jsPDF) {
  console.log('Adding page numbers');
  const pageCount = doc.getNumberOfPages();
  const pageHeight = doc.internal.pageSize.height;
  
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text(`Page ${i} of ${pageCount}`, 15, pageHeight - 10);
  }
} 